# Root properties of AWS provider
# https://www.serverless.com/framework/docs/providers/aws/guide/serverless.yml#root-properties

# Set the arbitary service name
service: terakoya-booking-renewal
# frameworkVersion is the version of the Serverless framework that you want to use
frameworkVersion: '3'
# Enable dotenv plugin to load environment variables from .env file
# https://mseeeen.msen.jp/how-to-set-environment-variables-of-lambda-with-serverless-framework/
# https://www.serverless.com/plugins/serverless-dotenv-plugin
# https://www.serverless.com/framework/docs/environment-variables
useDotenv: true

# Disable deprecation warnings
# https://www.serverless.com/framework/docs/deprecations
# disabledDeprecations:
#   - '*' # all deprecation warnings are disabled

# custom:
#   deploymentBucketName: ${self:service}-${self:provider.stage}

# General AWS settings
# https://www.serverless.com/framework/docs/providers/aws/guide/serverless.yml#general-settings
provider:
  # Specify the AWS provider
  name: aws
  # direct deployment is faster and have no downsides because it skips the creation of a CloudFormation stack and CloudFormation is slower
  # https://www.serverless.com/framework/docs/providers/aws/guide/deploying#deployment-method
  deploymentMethod: direct
  # ${opt:stage, 'dev'} means that if the stage is not specified, it will be set to 'dev'
  # But, if serverless deploy --stage prod is executed, it will be set to 'prod'
  # https://www.serverless.com/framework/docs/providers/aws/guide/variables#referencing-cli-options
  stage: ${opt:stage, 'dev'}
  # Specify default settings of AWS resources
  # region: ap-northeast-3
  region: ${env:AWS_DEFAULT_REGION}
  # Specify default runtime of Lambda functions
  runtime: python3.9
  # Specify default architecture of Lambda functions
  # https://www.serverless.com/framework/docs/providers/aws/guide/functions#instruction-set-architecture
  architecture: arm64
  # Specify default Environment Variables of Lambda functions
  # https://www.serverless.com/framework/docs/providers/aws/guide/functions#environment-variables
  environment:
    # Don't use AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY as environment variables of Lambda functions because they are automatically set by the AWS Lambda service
    # https://www.serverless.com/framework/docs/providers/aws/guide/credentials#use-iam-roles
    ACCESS_KEY: ${env:AWS_ACCESS_KEY_ID}
    SECRET_ACCESS_KEY: ${env:AWS_SECRET_ACCESS_KEY}
    DEFAULT_REGION: ${env:AWS_DEFAULT_REGION}
    STAGE: ${self:provider.stage}
  # Specify default IAM role of Lambda functions
  # https://www.serverless.com/framework/docs/providers/aws/guide/iam
  # IAM role arn syntax
  # https://docs.aws.amazon.com/ja_jp/IAM/latest/UserGuide/reference_identifiers.html#identifiers-arns
  iam:
    # role: arn:aws:iam::${env:AWS_ACCOUNT_ID}:role/${env:AWS_LAMBDA_EXECUTION_ROLE_NAME}
    role: canExecuteLambdaRole
  # Specify the bucket for deployment
  # https://www.serverless.com/framework/docs/providers/aws/guide/serverless.yml#deployment-bucket
  # https://suzuki-navi.hatenablog.com/entry/2021/01/08/142206
  deploymentBucket:
    # Specify the name of the bucket for deployment that Lambda functions and Layers are uploaded to
    # But the bucket must be created in advance
    # Path is <bucket_name>/serveless/<service_name>/<stage_name>/<timestamp>/*.zip
    # https://suzuki-navi.hatenablog.com/entry/2021/01/08/142206
    name: terakoya-bucket
    # maxPreviousDeploymentArtifacts is the number of previous deployment artifacts that will be kept in the bucket
    maxPreviousDeploymentArtifacts: 2
  # Specify default Lambda Layers of Lambda functions
  # https://www.serverless.com/framework/docs/providers/aws/guide/layers#using-your-layers
  layers:
    # Refer variables defined and output in other services
    # https://blog.ikedaosushi.com/entry/2019/04/07/012612
    # https://dev.classmethod.jp/articles/serverless-framework-ref-cloudformation-outputs/
    # https://www.serverless.com/framework/docs/providers/aws/guide/variables#reference-cloudformation-outputs
    # - ${cf:${self:service}-layer.layerRef}
    # - arn:aws:lambda:${env:AWS_DEFAULT_REGION}:${env:AWS_ACCOUNT_ID}:layer:${self:service}-${self:provider.stage}-layer:1
    # Specify TitleCased layer name + LambdaLayer
    # https://www.serverless.com/framework/docs/providers/aws/guide/layers#using-your-layers
    - !Ref BookingLambdaLayer
  # Specify default API Gateway (v2 HTTP API) settings
  # https://www.serverless.com/framework/docs/providers/aws/guide/serverless.yml#api-gateway-v2-http-api
  httpApi:
    name: ${self:service}-${self:provider.stage}-agw
    # Allow CORS HTTP all headers
    cors: true

# Layer settings
# https://www.serverless.com/framework/docs/providers/aws/guide/layers
layers:
  # Set arbitary name
  # this name becomes zip file to be uploaded to S3
  booking:
    # Specify the name of the layer that will be created and deployed
    name: ${self:service}-${self:provider.stage}-layer
    # Specify the path of the layer
    # Maybe it's no choice but to give up deleting the old S3 object including the old Lambda layer zip file after deployment
    # https://forum.serverless.com/t/delete-s3-buckets-after-deployment/5208
    # https://repost.aws/questions/QUYKQHC78_QCG7OeK4i8Rb4g/questions/QUYKQHC78_QCG7OeK4i8Rb4g/a-lambda-function-to-delete-old-archive-files-in-s3-bucket?
    # After zip is unzipped in /opt directory on Lambda, package paths must be /opt/python/<package_name>
    # https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html#configuration-layers-path
    path: functions/layer
    compatibleRuntimes:
      - python3.9
    compatibleArchitectures:
      - x86_64
      - arm64

# Error "No file matches include / exclude patterns" happens when using patterns like below
# Specify the files and folders to be packaged for deployment to Lambda functions
# https://symfoware.blog.fc2.com/blog-entry-2505.html
# https://filip5114.github.io/sls-manage-function-package/
# Sample
# https://github.com/serverless/examples/blob/v3/aws-python-auth0-custom-authorizers-api/serverless.yml
# Sample list
# https://github.com/serverless/examples

# packages are not uploaded to S3 if there's no changes in packages
# https://www.serverless.com/framework/docs/providers/aws/guide/packaging#package-configuration
package:
  # By default, .gitignore is excluded
  # https://www.serverless.com/framework/docs/providers/aws/guide/packaging#patterns
  patterns:
    - 'functions/**'
    - '!functions/layer/python/**'
    - '!functions/tmp/**'
    - '!functions/requirements.txt'
    - '!.devcontainer/**'
    - '!.github/**'
    - '!infrastructure/**'
    - '!openapi/**'
    - '!tests/**'
    - '!README.md'

# Lambda function settings
# https://www.serverless.com/framework/docs/providers/aws/guide/serverless.yml#general-function-settings
functions:
  # https://www.serverless.com/framework/docs/providers/aws/guide/serverless.yml#functions
  # Set arbitary name
  book:
    # https://fresopiya.com/2022/05/12/serverless-framework-2/#serverlessyml
    name: ${self:service}-${self:provider.stage}-book
    handler: functions/book.lambda_handler
    environment:
      TERAKOYA_GMAIL_ADDRESS: ${env:TERAKOYA_GMAIL_ADDRESS}
      TERAKOYA_GROUP_MAIL_ADDRESS: ${env:TERAKOYA_GROUP_MAIL_ADDRESS}
    # Attach a function to an API Gateway (v2 HTTP API) endpoint
    # https://www.serverless.com/framework/docs/providers/aws/events/http-api#event-definition
    events:
      - httpApi:
          method: post
          path: /book
  remind:
    name: ${self:service}-${self:provider.stage}-remind
    handler: functions/remind.lambda_handler
    environment:
      TERAKOYA_GMAIL_ADDRESS: ${env:TERAKOYA_GMAIL_ADDRESS}
      TERAKOYA_GROUP_MAIL_ADDRESS: ${env:TERAKOYA_GROUP_MAIL_ADDRESS}
    # Specify the event triggers of Lambda functions
    # https://dev.classmethod.jp/articles/serverless-framework-lambda-cron-execute/
    # https://www.serverless.com/framework/docs/providers/aws/guide/serverless.yml#eventbridge
    # eventBridge properties
    # https://www.serverless.com/framework/docs/providers/aws/events/event-bridge
    events:
      - eventBridge:
          name: ${self:service}-${self:provider.stage}-scheduled-remind
          schedule: cron(0 0,7 ? * TUE,SAT *)
  login:
    name: ${self:service}-${self:provider.stage}-login
    handler: functions/login.lambda_handler
    events:
      - httpApi:
          method: post
          path: /login
  fetch-booking-list:
    name: ${self:service}-${self:provider.stage}-fetch-booking-list
    handler: functions/fetch_booking_list.lambda_handler
    events:
      - httpApi:
          method: get
          path: /booking/list
  edit-booking-place:
    name: ${self:service}-${self:provider.stage}-edit-booking-place
    handler: functions/edit_booking_place.lambda_handler
    events:
      - httpApi:
          method: put
          path: /booking/edit/place
  # added-func:
  #   name: ${self:service}-${self:provider.stage}-added-func
  #   handler: functions/added-func.lambda_handler

# https://www.serverless.com/framework/docs/providers/aws/guide/resources#override-aws-cloudformation-resource
resources:
  Resources:
    # Define IAM role for Lambda functions
    # https://www.serverless.com/framework/docs/providers/aws/guide/iam#one-custom-iam-role-for-all-functions
    # Set arbitary name
    canExecuteLambdaRole:
      Type: AWS::IAM::Role
      # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html#aws-resource-iam-role-properties
      Properties:
        RoleName: AWSLambdaEnableCloudWatchS3-${self:provider.stage}
        # AssumeRolePolicyDocument is required
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        # ManagedPolicyArns are policies to be attached to the role that are managed by AWS
        # https://dev.classmethod.jp/articles/created_a_cross-account_access_role_in_cloudformation/
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AWSLambdaExecute
    # Define DynamoDB table
    # https://www.serverless.com/framework/docs/providers/aws/guide/resources
    bookingTable:
      Type: AWS::DynamoDB::Table
      # https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/aws-resource-dynamodb-table.html#aws-resource-dynamodb-table-properties
      Properties:
        TableName: ${self:service}-${self:provider.stage}
        # Define attributes used at KeySchema
        AttributeDefinitions:
          - AttributeName: date
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
        # Define pk and sk
        # https://atsushinotes.com/deploy_dynamodb_from_cloudformation-by-yaml/#index_id11
        KeySchema:
          - AttributeName: date
            # HASH is partition key
            KeyType: HASH
          - AttributeName: sk
            # RANGE is sort key
            KeyType: RANGE
        # PAY_PER_REQUEST is on-demand mode
        # https://dev.classmethod.jp/articles/dynamodb-cfn-ondemand-reinvent-2018/
        BillingMode: PAY_PER_REQUEST
    # Define S3 bucket
    # bucketForLambda:
    #   # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket.html#aws-properties-s3-bucket--examples
    #   Type: 'AWS::S3::Bucket'
    #   DeletionPolicy: Retain
    #   Properties:
    #     BucketName: ${self:custom.deploymentBucketName}



