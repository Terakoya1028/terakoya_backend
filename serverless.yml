# Root properties of AWS provider
# https://www.serverless.com/framework/docs/providers/aws/guide/serverless.yml#root-properties

# Set the arbitary service name
service: terakoya-booking
# frameworkVersion is the version of the Serverless framework that you want to use
frameworkVersion: '3'
# Enable dotenv plugin to load environment variables from .env file
# https://mseeeen.msen.jp/how-to-set-environment-variables-of-lambda-with-serverless-framework/
# https://www.serverless.com/plugins/serverless-dotenv-plugin
# https://www.serverless.com/framework/docs/environment-variables
useDotenv: true

# Disable deprecation warnings
# https://www.serverless.com/framework/docs/deprecations
# disabledDeprecations:
#   - '*' # all deprecation warnings are disabled

# General AWS settings
# https://www.serverless.com/framework/docs/providers/aws/guide/serverless.yml#general-settings
provider:
  # Specify the AWS provider
  name: aws
  # direct deployment is faster and have no downsides because it skips the creation of a CloudFormation stack and CloudFormation is slower
  # https://www.serverless.com/framework/docs/providers/aws/guide/deploying#deployment-method
  deploymentMethod: direct
  # ${opt:stage, 'dev'} means that if the stage is not specified, it will be set to 'dev'
  # But, if serverless deploy --stage prod is executed, it will be set to 'prod'
  # https://www.serverless.com/framework/docs/providers/aws/guide/variables#referencing-cli-options
  stage: ${opt:stage, 'dev'}
  # Specify default settings of AWS resources
  # region: ap-northeast-1
  # region: us-east-1
  region: ${env:AWS_DEFAULT_REGION}
  # Specify default runtime of Lambda functions
  runtime: python3.9
  # Specify default architecture of Lambda functions
  # https://www.serverless.com/framework/docs/providers/aws/guide/functions#instruction-set-architecture
  architecture: arm64
  # Specify default Environment Variables of Lambda functions
  # https://www.serverless.com/framework/docs/providers/aws/guide/functions#environment-variables
  environment:
    ACCESS_KEY: ${env:AWS_ACCESS_KEY_ID}
    SECRET_ACCESS_KEY: ${env:AWS_SECRET_ACCESS_KEY}
    DEFAULT_REGION: ${env:AWS_DEFAULT_REGION}
    DYNAMO_DB_BOOKING_TABLE: booking_${self:provider.stage}
  # Specify default IAM role of Lambda functions
  # https://www.serverless.com/framework/docs/providers/aws/guide/iam
  # IAM role arn syntax
  # https://docs.aws.amazon.com/ja_jp/IAM/latest/UserGuide/reference_identifiers.html#identifiers-arns
  iam:
    role: arn:aws:iam::${env:AWS_ACCOUNT_ID}:role/${env:AWS_LAMBDA_EXECUTION_ROLE_NAME}
  # Specify default Lambda Layers of Lambda functions
  # https://www.serverless.com/framework/docs/providers/aws/guide/layers#using-your-layers
  layers:
    # - arn:aws:lambda:${env:AWS_DEFAULT_REGION}:${env:AWS_ACCOUNT_ID}:layer:${self:service}-${self:provider.stage}-layer:1
    - !Ref BookingLambdaLayer

# Layer settings
# https://www.serverless.com/framework/docs/providers/aws/guide/layers
layers:
  # Set arbitary name
  booking:
    # Specify the name of the layer that will be created and deployed
    name: ${self:service}-${self:provider.stage}-layer
    # Specify the path of the layer
    # Maybe it's no choice but to give up deleting the old S3 object including the old Lambda layer zip file after deployment
    # https://forum.serverless.com/t/delete-s3-buckets-after-deployment/5208
    # https://repost.aws/questions/QUYKQHC78_QCG7OeK4i8Rb4g/questions/QUYKQHC78_QCG7OeK4i8Rb4g/a-lambda-function-to-delete-old-archive-files-in-s3-bucket?
    path: functions/python
    compatibleRuntimes:
      - python3.9
    compatibleArchitectures:
      - x86_64
      - arm64

# Error "No file matches include / exclude patterns" happens when using patterns like below
# Specify the files and folders to be packaged for deployment to Lambda functions
# https://symfoware.blog.fc2.com/blog-entry-2505.html
# https://filip5114.github.io/sls-manage-function-package/
# https://www.serverless.com/framework/docs/providers/aws/guide/packaging#package-configuration
# Sample
# https://github.com/serverless/examples/blob/v3/aws-python-auth0-custom-authorizers-api/serverless.yml
# Sample list
# https://github.com/serverless/examples
package:
  patterns:
    - 'functions/**'
    - '!functions/python/**'
    - '!functions/tmp/**'
    - '!functions/requirements.txt'

# Lambda function settings
# https://www.serverless.com/framework/docs/providers/aws/guide/serverless.yml#general-function-settings
functions:
  # https://www.serverless.com/framework/docs/providers/aws/guide/serverless.yml#functions
  # Set arbitary name
  book:
    # https://fresopiya.com/2022/05/12/serverless-framework-2/#serverlessyml
    name: ${self:service}-${self:provider.stage}-book
    handler: functions/book.lambda_handler
    environment:
      TERAKOYA_GMAIL_ADDRESS: ${env.TERAKOYA_GMAIL_ADDRESS}
      TERAKOYA_GROUP_MAIL_ADDRESS: ${env.TERAKOYA_GROUP_MAIL_ADDRESS}
  remind:
    name: ${self:service}-${self:provider.stage}-remind
    handler: functions/remind.lambda_handler
    environment:
      TERAKOYA_GMAIL_ADDRESS: ${env.TERAKOYA_GMAIL_ADDRESS}
      TERAKOYA_GROUP_MAIL_ADDRESS: ${env.TERAKOYA_GROUP_MAIL_ADDRESS}
    # Specify the event triggers of Lambda functions
    # https://dev.classmethod.jp/articles/serverless-framework-lambda-cron-execute/
    # https://www.serverless.com/framework/docs/providers/aws/guide/serverless.yml#eventbridge
    # eventBridge properties
    # https://www.serverless.com/framework/docs/providers/aws/events/event-bridge
    events:
      - eventBridge:
          name: scheduled-remind
          schedule: cron(0 0,7 ? * TUE,SAT *)
  login:
    name: ${self:service}-${self:provider.stage}-login
    handler: functions/login.lambda_handler
  fetch-booking-list:
    name: ${self:service}-${self:provider.stage}-fetch-booking-list
    handler: functions/fetch-booking-list.lambda_handler
  edit-booking-place:
    name: ${self:service}-${self:provider.stage}-edit-booking-place
    handler: functions/edit_booking_place.lambda_handler
  # added-func:
  #   name: ${self:service}-${self:provider.stage}-added-func
  #   handler: functions/added-func.lambda_handler

# https://www.serverless.com/framework/docs/providers/aws/guide/resources#override-aws-cloudformation-resource
# resources:
#   extensions:

