# Root properties of AWS provider
# https://www.serverless.com/framework/docs/providers/aws/guide/serverless.yml#root-properties

# Set the arbitary service name
service: terakoya
# frameworkVersion is the version of the Serverless framework that you want to use
frameworkVersion: '3'
# Enable dotenv plugin to load environment variables from .env file
# https://mseeeen.msen.jp/how-to-set-environment-variables-of-lambda-with-serverless-framework/
# https://www.serverless.com/plugins/serverless-dotenv-plugin
# https://www.serverless.com/framework/docs/environment-variables
useDotenv: true

# Disable deprecation warnings
# https://www.serverless.com/framework/docs/deprecations
# disabledDeprecations:
#   - '*' # all deprecation warnings are disabled

# custom:
#   deploymentBucketName: ${self:service}-${self:provider.stage}

# General AWS settings
# https://www.serverless.com/framework/docs/providers/aws/guide/serverless.yml#general-settings
provider:
  # Specify the AWS provider
  name: aws
  # direct deployment is faster and have no downsides because it skips the creation of a CloudFormation stack and CloudFormation is slower
  # https://www.serverless.com/framework/docs/providers/aws/guide/deploying#deployment-method
  deploymentMethod: direct
  # ${opt:stage, 'dev'} means that if the stage is not specified, it will be set to 'dev'
  # But, if serverless deploy --stage prod is executed, it will be set to 'prod'
  # https://www.serverless.com/framework/docs/providers/aws/guide/variables#referencing-cli-options
  stage: ${opt:stage, 'dev'}
  # Specify default settings of AWS resources
  # region: ap-northeast-3
  region: ${env:AWS_DEFAULT_REGION}
  # Specify default runtime of Lambda functions
  runtime: python3.9
  # Specify default architecture of Lambda functions
  # https://www.serverless.com/framework/docs/providers/aws/guide/functions#instruction-set-architecture
  architecture: arm64
  # Specify default Environment Variables of Lambda functions
  # https://www.serverless.com/framework/docs/providers/aws/guide/functions#environment-variables
  environment:
    # Don't use AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY as environment variables of Lambda functions because they are automatically set by the AWS Lambda service
    # https://www.serverless.com/framework/docs/providers/aws/guide/credentials#use-iam-roles
    ACCESS_KEY: ${env:AWS_ACCESS_KEY_ID}
    SECRET_ACCESS_KEY: ${env:AWS_SECRET_ACCESS_KEY}
    DEFAULT_REGION: ${env:AWS_DEFAULT_REGION}
    STAGE: ${self:provider.stage}
    SLACK_ERROR_CH_WEBHOOK_URL: ${env:SLACK_ERROR_CH_WEBHOOK_URL}
  # Specify default IAM role of all Lambda functions
  # https://www.serverless.com/framework/docs/providers/aws/guide/iam
  # IAM role arn syntax
  # https://docs.aws.amazon.com/ja_jp/IAM/latest/UserGuide/reference_identifiers.html#identifiers-arns
  iam:
    # role: arn:aws:iam::${env:AWS_ACCOUNT_ID}:role/${env:AWS_LAMBDA_EXECUTION_ROLE_NAME}
    role: canExecuteLambdaRole
  # Specify the bucket for deployment
  # https://www.serverless.com/framework/docs/providers/aws/guide/serverless.yml#deployment-bucket
  # https://suzuki-navi.hatenablog.com/entry/2021/01/08/142206
  deploymentBucket:
    # Specify the name of the bucket for deployment that Lambda functions and Layers are uploaded to
    # But the bucket must be created in advance
    # Path is <bucket_name>/serveless/<service_name>/<stage_name>/<timestamp>/*.zip
    # https://suzuki-navi.hatenablog.com/entry/2021/01/08/142206
    name: terakoya-bucket
    # maxPreviousDeploymentArtifacts is the number of previous deployment artifacts that will be kept in the bucket
    maxPreviousDeploymentArtifacts: 2
  # Specify default Lambda Layers of Lambda functions
  # https://www.serverless.com/framework/docs/providers/aws/guide/layers#using-your-layers
  layers:
    # Refer variables defined and output in other services
    # https://blog.ikedaosushi.com/entry/2019/04/07/012612
    # https://dev.classmethod.jp/articles/serverless-framework-ref-cloudformation-outputs/
    # https://www.serverless.com/framework/docs/providers/aws/guide/variables#reference-cloudformation-outputs
    # - ${cf:${self:service}-layer.layerRef}
    # - arn:aws:lambda:${env:AWS_DEFAULT_REGION}:${env:AWS_ACCOUNT_ID}:layer:${self:service}-${self:provider.stage}-layer:1
    # Specify TitleCased layer name + LambdaLayer
    # https://www.serverless.com/framework/docs/providers/aws/guide/layers#using-your-layers
    - !Ref BookingLambdaLayer
  # Specify default API Gateway (v2 HTTP API) settings
  # https://www.serverless.com/framework/docs/providers/aws/guide/serverless.yml#api-gateway-v2-http-api
  httpApi:
    name: ${self:service}-${self:provider.stage}-agw
    # CORS settings
    # https://www.serverless.com/framework/docs/providers/aws/events/http-api#cors-setup
    cors:
      # Access-Control-Allow-Credentials header (withCredentials) is not allowed when Access-Control-Allow-Origin is wildcard (*). 
      # https://developer.mozilla.org/ja/docs/Web/HTTP/CORS/Errors/CORSNotSupportingCredentials
      allowOrigins: 
        - ${env:WEB_CLIENT_ORIGIN}
        - http://localhost:3000 # for web client on local to access API Gateway
      allowedHeaders:
        # Content-Type is required to indicate the media type of the request body sent to API Gateway.
        # https://e-words.jp/w/Content-Type.html
        # https://developer.mozilla.org/ja/docs/Web/HTTP/Headers/Content-Type
        - Content-Type
        # Authorization is required to send credentials (such as access token) to API Gateway.
        # https://atmarkit.itmedia.co.jp/ait/articles/1608/10/news021.html
        # https://developer.mozilla.org/ja/docs/Web/HTTP/Headers/Authorization
        - Authorization
        # X-Amz-Date is required for AWS Signature Version 4 to indicate the date and time when the request was signed.
        # https://docs.aws.amazon.com/ja_jp/IAM/latest/UserGuide/signing-elements.html
        - X-Amz-Date
        # X-Api-Key is required for AWS Signature Version 4 to send the API key to API Gateway when it uses the API key.
        # https://docs.aws.amazon.com/ja_jp/apigateway/latest/developerguide/api-gateway-api-key-source.html
        - X-Api-Key
        # X-Amz-Security-Token is required for AWS Signature Version 4 to send the security token to API Gateway when it uses temporary security credentials.
        # https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/userguide/RESTAuthentication.html
        - X-Amz-Security-Token
        # X-Amz-User-Agent is required for AWS Signature Version 4 to send the user agent string to API Gateway.
        # https://qiita.com/sakadonohito/items/61b03bb5224ef83bde41#allowedheader
        - X-Amz-User-Agent
      allowedMethods:
        - OPTIONS
        - GET
        - POST
        - PUT
        - DELETE
      # Allow browser to send the request with credentials (cookies, HTTP authentication and client side SSL certificates) to API Gateway by setting Access-Control-Allow-Credentials header to true.
      # https://developer.mozilla.org/ja/docs/Web/HTTP/Headers/Access-Control-Allow-Credentials
      allowCredentials: true

# Layer settings
# https://www.serverless.com/framework/docs/providers/aws/guide/layers
layers:
  # Set arbitary name
  # this name becomes zip file to be uploaded to S3
  booking:
    # Specify the name of the layer that will be created and deployed
    name: ${self:service}-${self:provider.stage}-layer
    # Specify the path of the layer
    # Maybe it's no choice but to give up deleting the old S3 object including the old Lambda layer zip file after deployment
    # https://forum.serverless.com/t/delete-s3-buckets-after-deployment/5208
    # https://repost.aws/questions/QUYKQHC78_QCG7OeK4i8Rb4g/questions/QUYKQHC78_QCG7OeK4i8Rb4g/a-lambda-function-to-delete-old-archive-files-in-s3-bucket?
    # After zip is unzipped in /opt directory on Lambda, package paths must be /opt/python/<package_name>
    # https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html#configuration-layers-path
    path: functions/layer
    compatibleRuntimes:
      - python3.9
    compatibleArchitectures:
      - x86_64
      - arm64

# Error "No file matches include / exclude patterns" happens when using patterns like below
# Specify the files and folders to be packaged for deployment to Lambda functions
# https://symfoware.blog.fc2.com/blog-entry-2505.html
# https://filip5114.github.io/sls-manage-function-package/
# Sample
# https://github.com/serverless/examples/blob/v3/aws-python-auth0-custom-authorizers-api/serverless.yml
# Sample list
# https://github.com/serverless/examples

# packages are not uploaded to S3 if there's no changes in packages
# https://www.serverless.com/framework/docs/providers/aws/guide/packaging#package-configuration
package:
  # By default, .gitignore is excluded
  # https://www.serverless.com/framework/docs/providers/aws/guide/packaging#patterns
  patterns:
    - 'functions/**'
    - '!functions/layer/python/**'
    - '!functions/tmp/**'
    - '!functions/requirements.txt'
    - '!.devcontainer/**'
    - '!.github/**'
    - '!docs/**'
    - '!tests/**'
    - '!tools/**'
    - '!README.md'

# Lambda function settings
# https://www.serverless.com/framework/docs/providers/aws/guide/serverless.yml#general-function-settings
functions:
  # https://www.serverless.com/framework/docs/providers/aws/guide/serverless.yml#functions
  # Set arbitary name
  book:
    # https://fresopiya.com/2022/05/12/serverless-framework-2/#serverlessyml
    name: ${self:service}-${self:provider.stage}-book
    handler: functions/handlers/booking/book.lambda_handler
    environment:
      TERAKOYA_GMAIL_ADDRESS: ${env:TERAKOYA_GMAIL_ADDRESS}
      TERAKOYA_GROUP_MAIL_ADDRESS: ${env:TERAKOYA_GROUP_MAIL_ADDRESS}
    # Attach a function to an API Gateway (v2 HTTP API) endpoint
    # https://www.serverless.com/framework/docs/providers/aws/events/http-api#event-definition
    events:
      - httpApi:
          method: post
          path: /book
  remind:
    name: ${self:service}-${self:provider.stage}-booking-remind
    handler: functions/handlers/booking/remind.lambda_handler
    environment:
      TERAKOYA_GMAIL_ADDRESS: ${env:TERAKOYA_GMAIL_ADDRESS}
      TERAKOYA_GROUP_MAIL_ADDRESS: ${env:TERAKOYA_GROUP_MAIL_ADDRESS}
    # Specify the event triggers of Lambda functions
    # https://dev.classmethod.jp/articles/serverless-framework-lambda-cron-execute/
    # https://www.serverless.com/framework/docs/providers/aws/guide/serverless.yml#eventbridge
    # eventBridge properties
    # https://www.serverless.com/framework/docs/providers/aws/events/event-bridge
    events:
      - eventBridge:
          name: ${self:service}-${self:provider.stage}-booking-scheduled-remind
          schedule: cron(0 0,7 ? * TUE,SAT *)
  fetch-booking-list:
    name: ${self:service}-${self:provider.stage}-fetch-booking-list
    handler: functions/handlers/booking/fetch_booking_list.lambda_handler
    events:
      - httpApi:
          method: get
          path: /booking/list
  edit-booking-place:
    name: ${self:service}-${self:provider.stage}-edit-booking-place
    handler: functions/handlers/booking/edit_booking_place.lambda_handler
    events:
      - httpApi:
          method: put
          path: /booking/edit/place
  postConfirmation:
    name: ${self:service}-${self:provider.stage}-auth-post-confirmation
    handler: functions/handlers/auth/post_confirmation.lambda_handler
  # FastAPI + Mangum + Lambda + API Gateway is defined like below
  # https://zenn.dev/hayata_yamamoto/articles/781efca1687272#%E3%81%A9%E3%81%86%E3%82%84%E3%81%A3%E3%81%A6%E4%BD%BF%E3%81%86%E3%81%AE%E3%81%8B%EF%BC%9F
  hub:
    name: ${self:service}-${self:provider.stage}-hub
    handler: functions/hub.lambda_handler
    environment:
      S3_TERAKOYA_BUCKET_NAME: ${env:S3_TERAKOYA_BUCKET_NAME}
      COGNITO_USER_POOL_ID: ${env:COGNITO_USER_POOL_ID}
      COGNITO_USER_POOL_CLIENT_ID: ${env:COGNITO_USER_POOL_CLIENT_ID}
    events:
      - httpApi:
          # ANY method is used to catch all HTTP methods
          method: any
          # /{proxy+} route works as a catch-all route that catches all requests that don't match any other route like /book defined above 
          # https://dev.classmethod.jp/articles/api-gateway-adds-three-features/
          # FastAPI returns status code in the range of 400-499 when client sends a request to a route that doesn't exist in FastAPI
          # https://fastapi.tiangolo.com/tutorial/handling-errors/
          path: /{proxy+}
  # added-func:
  #   name: ${self:service}-${self:provider.stage}-added-func
  #   handler: functions/added-func.lambda_handler

# https://www.serverless.com/framework/docs/providers/aws/guide/resources#override-aws-cloudformation-resource
resources:
  Resources:
    # Define IAM role for Lambda functions
    # https://www.serverless.com/framework/docs/providers/aws/guide/iam#one-custom-iam-role-for-all-functions
    # Set arbitary name
    canExecuteLambdaRole:
      Type: AWS::IAM::Role
      # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html#aws-resource-iam-role-properties
      Properties:
        RoleName: AWSLambdaEnableCloudWatchS3-${self:provider.stage}
        # Define target service (Principal) to be allowed to assume this Role and actions (Action) of the IAM Role.
        # https://dev.classmethod.jp/articles/iam-role-and-assumerole/
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  # Attach this Role to Lambda function.
                  - lambda.amazonaws.com
              # sts:AssumeRole is the action to allow the service to assume any IAM Role.
              Action: sts:AssumeRole
        # ManagedPolicyArns are policies to be attached to the role that are managed by AWS
        # https://dev.classmethod.jp/articles/created_a_cross-account_access_role_in_cloudformation/
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AWSLambdaExecute
    # Define DynamoDB table
    # https://www.serverless.com/framework/docs/providers/aws/guide/resources
    bookingTable:
      Type: AWS::DynamoDB::Table
      # https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/aws-resource-dynamodb-table.html#aws-resource-dynamodb-table-properties
      Properties:
        TableName: ${self:service}-${self:provider.stage}-booking
        # Define attributes used at KeySchema
        AttributeDefinitions:
          - AttributeName: date
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
        # Define pk and sk
        # https://atsushinotes.com/deploy_dynamodb_from_cloudformation-by-yaml/#index_id11
        KeySchema:
          - AttributeName: date
            # HASH is partition key
            KeyType: HASH
          - AttributeName: sk
            # RANGE is sort key
            KeyType: RANGE
        # PAY_PER_REQUEST is on-demand mode
        # https://dev.classmethod.jp/articles/dynamodb-cfn-ondemand-reinvent-2018/
        BillingMode: PAY_PER_REQUEST
    userTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-user
        AttributeDefinitions:
          - AttributeName: uuid
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
        KeySchema:
          - AttributeName: uuid
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
    # Cognito User Pool is like a database that stores user authentication information
    # https://zenn.dev/naok_1207/articles/d66a4a1d914000#userpool-%E3%81%AE%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-${self:provider.stage}-user-pool
        Policies:
          # Define password policy that users can set their password based on when they sign up
          # https://docs.aws.amazon.com/ja_jp/cognito/latest/developerguide/user-pool-settings-policies.html
          PasswordPolicy:
            # Passwords must be at least 8 characters long and contain at least one number and one lowercase letter.
            # https://docs.aws.amazon.com/ja_jp/cognito/latest/developerguide/user-pool-settings-policies.html#user-pool-settings-password-policies
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireUppercase: false
            RequireSymbols: false
        # Define required attributes when users sign up
        # https://dev.classmethod.jp/articles/quickly-create-an-authentication-function-with-amazon-cognito-userpool-with-the-aws-cli/
        # https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-userpool-schemaattribute.html
        Schema:
          # Require　email to sign up
          - AttributeDataType: String
            Name: email
            Required: true
        # Specify self-verification methods when users sign up (ex: email, phone number, etc.)
        # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpool.html#cfn-cognito-userpool-autoverifiedattributes
        AutoVerifiedAttributes:
          - email
        # Specify attributes as username that users can use to sign in (ex: email, phone number, etc.)
        # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpool.html#cfn-cognito-userpool-usernameattributes
        UsernameAttributes:
          - email
        # Define password recovery methods
        # https://blog.usize-tech.com/aws-amplify-storage-by-cfn/
        # https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-userpool-accountrecoverysetting.html
        AccountRecoverySetting:
          RecoveryMechanisms:
            # Name is the name of password recovery method (ex: verified_email, verified_phone_number, admin_only)
            # https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-userpool-recoveryoption.html
            - Name: verified_email
              Priority: 1 # Priority is the order of password recovery methods (ex: 1 or 2)
        # EmailVerificationSubject don't work if VerificationMessageTemplate is defined.
        # https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpool.html#cfn-cognito-userpool-emailverificationsubject
        # EmailVerificationSubject: "${env:VERIFICATION_EMAI_SUBJECT_PREFIX}Verify your account"
        # Define email configuration (ex: from SES email address, reply-to email address, etc.)
        # https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-userpool-emailconfiguration.html
        # https://blog.usize-tech.com/mailaddress-check-in-amazon-cognito/
        EmailConfiguration:
          # ReplyToEmailAddress is ok to not be SES email ARN unlike FromEmailAddress
          ReplyToEmailAddress: ${env:TERAKOYA_GROUP_MAIL_ADDRESS}
          # COGNITO_DEFAULT is default email sending account that is managed by AWS
          # DEVELOPER is to use SES email address to send a verification email
          EmailSendingAccount: DEVELOPER
          # SourceArn is ARN of SES email address that is used as FromEmailAddress
          # SES ARN pattern is arn:aws:ses:<region>:<account_id>:identity/<email>
          SourceArn: arn:aws:ses:${env:AWS_DEFAULT_REGION}:${env:AWS_ACCOUNT_ID}:identity/${env:TERAKOYA_GMAIL_ADDRESS}
        # Only DefaultEmailOption works in VerificationMessageTemplate
        # https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-userpool-verificationmessagetemplate.html
        VerificationMessageTemplate:
          # In the actual email, {####} is replaced with a verification code
          # EmailMessage: "Your verification code is {####}." # this don't work
          # EmailSubject: "${env:VERIFICATION_EMAI_SUBJECT_PREFIX}Verify your account" # this don't work
          # After User Pool is created, you need to manually create a domain to send a verification email because User Pool uses the domain when a user when users sign up or reset password.
          # Serverless Framework can't create a domain for User Pool automatically. So you need to do on AWS console or via AWS CLI.
          # aws cognito-idp create-user-pool-domain --user-pool-id <UserPoolId> --domain <Domain> (ex: <Domain> is terakoya-dev or terakoya-prod)
          # https://docs.aws.amazon.com/ja_jp/cognito/latest/developerguide/cognito-user-pools-assign-domain.html

          # Send a link to verify email address instead of a verification code
          # https://dev.classmethod.jp/articles/amazon-cognito-user-pool-user-sign-up-for-an-error-was-encountered-with-the-requested-page/
          DefaultEmailOption: CONFIRM_WITH_LINK
        # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-userpool-lambdaconfig.html
        LambdaConfig:
          # Specify a lambda function to be executed when a user verifies their email address.
          # https://docs.aws.amazon.com/ja_jp/cognito/latest/developerguide/user-pool-lambda-post-confirmation.html
          # TODO: Run the following command to assume resource-based policy to PostConfirmation lambda function in order to allow Cognito User Pool to invoke Lambda function.
          # ? aws lambda add-permission --function-name arn:aws:lambda:<region>:<account_id>:function:<function_name> --statement-id <sid> --action lambda:InvokeFunction --principal cognito-idp.amazonaws.com --source-arn arn:aws:cognito-idp:<region>:<account_id>:userpool:<user_pool_id> --region <region>
          # ! It's impossible to assume resource-based policy to Lambda function via Serverless Framework. So, you need to do on AWS console or via AWS CLI.
          # https://dev.classmethod.jp/articles/cognito-lambda-trigger-version-alias/ 
          # https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html#important-lambda-considerations
          PostConfirmation: 
            # Fn::GetAtt: [logicalNameOfResource, attributeName] is to get an attribute value of a resource
            # https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-getatt.html
            # Define a lambda function in the shape of <funcName in PascalCase>LambdaFunction.
            # For example, if the function name is not postConfirmation but verifiedEmail, the logical name is VerifiedEmailLambdaFunction.
            Fn::GetAtt: [PostConfirmationLambdaFunction, Arn]
    # Cognito User Pool Client has a client ID and client secret that are used to access UserPool and authenticate a user.
    # https://docs.aws.amazon.com/ja_jp/cognito/latest/developerguide/user-pool-settings-client-apps.html
    # https://qiita.com/maaaashin324/items/04c395eb4a2764480f0c#cognito-user-pool-1
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service}-${self:provider.stage}-user-pool-client
        UserPoolId:
          Ref: CognitoUserPool
        # Allow authentification flows to be used
        # https://qiita.com/KWS_0901/items/083c6e903616b3c5e838#cognito-identity-provider-api%E5%88%A9%E7%94%A8
        # https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_UserPoolClientType.html#CognitoUserPools-Type-UserPoolClientType-ExplicitAuthFlows
        ExplicitAuthFlows: 
          # Once authentication is successful, Cognito issues three JWTs (JSON Web Tokens): an ID token, an access token, and a refresh token. 
          # The access token and ID token have an expiration date (1 hour by default), and when they expire, the user is asked to authenticate again.
          # However, with a refresh token, the user can obtain a new ID token and access token without having to authenticate again.
          # Refresh tokens are valid for 30 days by default.
          # https://zenn.dev/takamin55/articles/8442a7583fe5fa
          
          # ID token: Contains user profile attributes (such as username, email, and phone number) in the form of claims and represents who the user is.
          # Access token: indicates what the user can do, i.e., what operations can be performed on which resources.

          # ALLOW_REFRESH_TOKEN_AUTH is to allow users to get a new ID token and access token without having to authenticate again.
          - ALLOW_REFRESH_TOKEN_AUTH
          # ALLOW_ADMIN_USER_PASSWORD_AUTH is to allow admin users to sign in with a password to get a new ID token and access token instead of the user.
          # For example, this flow is used when the system manually creates accounts for some users and sets initial passwords.
          # Administrators can use the AdminInitiateAuth API to send a username and password and obtain a token for the user.
          # This flow is useful when an administrator signs in to the system on behalf of a user, or when the administrator needs to perform certain operations on a user's account.
          # But the use of this flow is must be limited as less as possible at the security point of view.
          # https://dev.classmethod.jp/articles/obtain-access-tokens-for-cognito-users-using-aws-cli/
          - ALLOW_ADMIN_USER_PASSWORD_AUTH
          # ALLOW_USER_PASSWORD_AUTH is to send password to server via network directly as plain text, so it's not secure than sending password via SRP.
          # But password is encrypted by SSL in HTTPS communication, so it's not a big problem.
          # However, browser (ex: F12 > Network > Headers) and server (ex: CloudWatch Logs) can see password as plain text because these endpoints are not encrypted by SSL.
          # https://www.kagoya.jp/howto/rentalserver/beginner/https/
          # https://developer.mozilla.org/ja/docs/Glossary/HTTPS
          - ALLOW_USER_PASSWORD_AUTH
          # SRP (Secure Remote Password) is not to send password to server via network directly, so it's more secure than sending password directly.
          # It's difficult to implement SRP, so it's better to use ALLOW_USER_PASSWORD_AUTH and send password directly to server so that it's easier to implement　at first.
          # https://qiita.com/ishiyama0530/items/426dc3f76f68bf586c28#user_srp_auth
          # - ALLOW_USER_SRP_AUTH
        # Pros of using a client secret
        # 1. Having both a client ID and a client secret allows the system to verify that the client is authenticated. This is a type of two-step authentication, which provides greater security than one-step.
        # 2. By issuing a different client ID and secret to each client (application), you can manage permissions for each application.

        # GenerateSecret is to generate a client secret to access UserPool from a client (Client authentication flow).
        # But it's not recommended to use a client secret because it's difficult to manage. So, it's better to set false.
        # A client secret is not required if Cognito authencation is performed on Sever-side.
        # If a client secret is not generated, parts of OAuth 2.0 flows will not work.
        # https://docs.aws.amazon.com/ja_jp/cognito/latest/developerguide/user-pool-settings-client-apps.html
        GenerateSecret: false